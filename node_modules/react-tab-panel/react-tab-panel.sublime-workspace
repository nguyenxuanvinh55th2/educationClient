{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"defa",
				"defaultStripStyle"
			],
			[
				"wi",
				"Width"
			],
			[
				"borderLe",
				"borderLeftColor"
			],
			[
				"arrow",
				"arrowStyle"
			],
			[
				"arro",
				"arrowStyle"
			],
			[
				"ac",
				"anchorStyle"
			],
			[
				"conta",
				"containerProps"
			],
			[
				"con",
				"containerProps"
			],
			[
				"acti",
				"activeIndex"
			],
			[
				"act",
				"activeIndex"
			],
			[
				"active",
				"activeTitleStyle"
			],
			[
				"dele",
				"deleteProps"
			],
			[
				"clone",
				"cloneItems"
			],
			[
				"onMenu",
				"onMenuClick"
			],
			[
				"window",
				"windowHideLayerListener"
			],
			[
				"tar",
				"targetRegion"
			],
			[
				"menu",
				"menuItems"
			],
			[
				"bor",
				"borderWidth"
			],
			[
				"scroller",
				"scrollerArrowColor"
			],
			[
				"ba",
				"background"
			],
			[
				"sele",
				"selectedIndex"
			],
			[
				"slee",
				"selectedIndex"
			],
			[
				"selec",
				"selectedIndexes"
			],
			[
				"acce",
				"acceptsItems"
			],
			[
				"getE",
				"getRenderProps"
			],
			[
				"isSty",
				"isStyleProp"
			],
			[
				"P",
				"PROXY_ELEMENTS"
			],
			[
				"itemCom",
				"itemComponent"
			],
			[
				"renderPO",
				"renderProxy"
			],
			[
				"pro",
				"proxies"
			],
			[
				"Tab",
				"TabPanel"
			],
			[
				"getRed",
				"getRenderChildren"
			],
			[
				"getItem",
				"getItemParent"
			],
			[
				"proper",
				"properties"
			],
			[
				"snapTo",
				"snapToGridRegion"
			],
			[
				"initi",
				"initialRegionInCanvas"
			],
			[
				"ha",
				"halfWidth"
			],
			[
				"xCe",
				"xCenters"
			],
			[
				"hori",
				"horizontalCenter"
			],
			[
				"ver",
				"verticalCenter"
			],
			[
				"xCenter",
				"xCenterResults"
			],
			[
				"xC",
				"xCenterAbsDiff"
			],
			[
				"yCen",
				"yCenterAbsDiff"
			],
			[
				"itemM",
				"itemMiddleX"
			],
			[
				"xM",
				"xMiddle"
			],
			[
				"yM",
				"yMiddles"
			],
			[
				"dragItem",
				"dragItem"
			],
			[
				"dropTa",
				"dropTargetArgs"
			],
			[
				"cons",
				"constrainRegion"
			],
			[
				"dra",
				"draggedItems"
			],
			[
				"onItem",
				"onItemMouseDown"
			],
			[
				"drag",
				"dragConfig"
			],
			[
				"DRA",
				"DRAG_ITEM"
			],
			[
				"absD",
				"absDiff22"
			],
			[
				"sec",
				"second"
			],
			[
				"firs",
				"firstAbsDiff"
			],
			[
				"first",
				"firstSide"
			],
			[
				"fir",
				"firstDiff"
			],
			[
				"bui",
				"buildResults"
			],
			[
				"secon",
				"secondSnapValue"
			],
			[
				"verti",
				"verticalStyle"
			],
			[
				"ho",
				"horizontalStyle"
			],
			[
				"snap",
				"snapInfo"
			],
			[
				"min",
				"minDiffFor"
			],
			[
				"sna",
				"snapTo"
			],
			[
				"side1",
				"side1Value"
			],
			[
				"side",
				"sideNames"
			],
			[
				"re",
				"regions"
			],
			[
				"input",
				"inputStyle"
			],
			[
				"render",
				"renderProps"
			],
			[
				"old",
				"oldAnchored"
			],
			[
				"ancho",
				"anchorArray"
			],
			[
				"Data",
				"DataManager"
			],
			[
				"getI",
				"getItemInnerRegionInCanvas"
			],
			[
				"curr",
				"currentItem"
			],
			[
				"getC",
				"getConstrainNode"
			],
			[
				"paren",
				"parentRegion"
			],
			[
				"upa",
				"updateItemsMap"
			],
			[
				"getITEM",
				"getItemRegionInCanvas"
			],
			[
				"target",
				"targetPos"
			],
			[
				"getItemR",
				"getItemRegionInCanvas"
			],
			[
				"di",
				"diffTop"
			],
			[
				"getIte",
				"getItemRegion"
			],
			[
				"DR",
				"DRAG_TARGET"
			],
			[
				"parent",
				"parentId"
			],
			[
				"prox",
				"proxyPos"
			],
			[
				"DRAG",
				"DRAG_STAR_ITEM"
			],
			[
				"State",
				"StateManager"
			],
			[
				"Item",
				"ItemContainerMixin"
			],
			[
				"compo",
				"componentWillMount"
			],
			[
				"treeNo",
				"treeNodeProps"
			],
			[
				"onMou",
				"onMouseUp"
			],
			[
				"position",
				"positionAndSize"
			],
			[
				"onRei",
				"onResizeDragStart"
			],
			[
				"onHa",
				"onHandleDragStart"
			],
			[
				"onItemsD",
				"onItemsDragStart"
			],
			[
				"getBod",
				"getBodyStyle"
			],
			[
				"posi",
				"positionAndSize"
			],
			[
				"refre",
				"refreshSelector"
			],
			[
				"const",
				"constrain"
			],
			[
				"syncPro",
				"syncProxySize"
			],
			[
				"proxyN",
				"proxyNode"
			],
			[
				"proxy",
				"proxyNodes"
			],
			[
				"renderItem",
				"renderItemNodes"
			],
			[
				"renderPro",
				"renderProxyNodes"
			],
			[
				"itemN",
				"itemNodes"
			],
			[
				"create",
				"createWidget"
			],
			[
				"getProxy",
				"getProxyPosition"
			],
			[
				"rendeRItem",
				"renderItemNodes"
			],
			[
				"getITem",
				"getItemId"
			],
			[
				"handle",
				"handleItemDrop"
			],
			[
				"onM",
				"onMouseEnter"
			],
			[
				"handleD",
				"handleDragEnd"
			],
			[
				"reposition",
				"repositionDrag"
			],
			[
				"property",
				"propertyValues"
			],
			[
				"propert",
				"property"
			],
			[
				"Pro",
				"PropertiesManager"
			],
			[
				"fa",
				"factory"
			],
			[
				"sing",
				"singleSelect"
			],
			[
				"selected",
				"selectedCount"
			],
			[
				"pos",
				"position"
			],
			[
				"layer",
				"layerRegion"
			],
			[
				"de",
				"defaultValue"
			],
			[
				"satu",
				"saturationConfig"
			],
			[
				"defau",
				"defaultValue"
			],
			[
				"default",
				"defaultColor"
			],
			[
				"handleS",
				"handleSaturationDragStart"
			],
			[
				"C",
				"COLOR"
			]
		]
	},
	"buffers":
	[
		{
			"file": "build-style.config.js",
			"settings":
			{
				"buffer_size": 457,
				"line_ending": "Unix"
			}
		},
		{
			"file": "index.jsx",
			"settings":
			{
				"buffer_size": 1245,
				"line_ending": "Unix"
			}
		},
		{
			"file": "index.html",
			"settings":
			{
				"buffer_size": 442,
				"line_ending": "Unix"
			}
		},
		{
			"file": "webpack.config.js",
			"settings":
			{
				"buffer_size": 294,
				"line_ending": "Unix"
			}
		},
		{
			"file": "loaders.config.js",
			"settings":
			{
				"buffer_size": 515,
				"line_ending": "Unix"
			}
		},
		{
			"file": "package.json",
			"settings":
			{
				"buffer_size": 1711,
				"line_ending": "Unix"
			}
		},
		{
			"file": "README.md",
			"settings":
			{
				"buffer_size": 3593,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Gulpfile.js",
			"settings":
			{
				"buffer_size": 193,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/index.jsx",
			"settings":
			{
				"buffer_size": 3432,
				"line_ending": "Unix"
			}
		},
		{
			"file": "index.styl",
			"settings":
			{
				"buffer_size": 17,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "'use strict';\n\nvar React  = require('react')\nvar copy   = require('copy-utils').copy\nvar buffer = require('functionally').buffer\n\nvar LIST_ITEM_STYLE = {\n    display: 'inline-block'\n}\n\nvar LIST_STYLE = {\n    margin   : 0,\n    padding  : 0,\n    listStyle: 'none',\n    position : 'relative',\n    display  : 'inline-block'\n}\n\nvar SCROLLER_STYLE = {\n    top       : 0,\n    position  : 'absolute',\n    display   : 'inline-block',\n    height    : '100%',\n    cursor    : 'pointer'\n}\n\nvar Scroller = React.createClass({displayName: 'Scroller',\n\n    display: 'Scroller',\n\n    getDefaultProps: function(){\n        return {\n            width: 5\n        }\n    },\n\n    render: function(){\n        var props = this.props\n        var side = this.props.side\n\n        props.className = props.className || ''\n        props.className += ' tab-panel-scroller ' + side\n\n        if (props.active && props.visible){\n            props.className += ' active'\n        }\n\n        var scrollerStyle = copy(SCROLLER_STYLE)\n        scrollerStyle.width = props.width\n\n        props.style = copy(props.style, scrollerStyle)\n\n        props.style[side] = 0\n\n        if (!props.visible){\n            props.style.display = 'none'\n        }\n\n        return props.factory?\n                    props.factory(props):\n                    React.createElement(\"div\", React.__spread({},  props))\n    }\n})\n\nvar ScrollerFactory = React.createFactory(Scroller)\n\nmodule.exports = React.createClass({displayName: 'exports',\n\n    display: 'TabPanel.Strip',\n\n    propTypes: {\n        activeIndex    : React.PropTypes.number,\n        activeStyle    : React.PropTypes.object,\n        activeClassName: React.PropTypes.string,\n\n        titleStyle    : React.PropTypes.object,\n        titleClassName: React.PropTypes.string,\n\n        anchorStyle   : React.PropTypes.object,\n        scrollerStyle : React.PropTypes.object,\n        scrollerWidth : React.PropTypes.number,\n\n        scrollStep    : React.PropTypes.number,\n        scrollSpeed   : React.PropTypes.number\n\n        //each item in the TabPanel can also specify a titleStyle\n        //and a titleClassName, which are added to the values in props\n    },\n\n    getInitialState: function(){\n        return {\n            adjustScroll: true,\n            scrollPos   : 0\n        }\n    },\n\n    componentWillUnmount: function(){\n        if (this.props.enableScroll){\n            window.removeEventListener('resize', this.onResizeListener)\n        }\n    },\n\n    componentDidMount: function(){\n        if (this.props.enableScroll){\n            this.adjustScroll()\n\n            window.addEventListener('resize', this.onResizeListener = buffer(this.onWindowResize, this.props.onWindowResizeBuffer, this))\n        }\n    },\n\n    componentDidUpdate: function(){\n        this.props.enableScroll && this.adjustScroll()\n    },\n\n    onWindowResize: function(){\n        this.adjustScroll()\n        this.doScroll(0)\n    },\n\n    adjustScroll: function(){\n        if (!this.props.enableScroll){\n            return\n        }\n\n        if (!this.state.adjustScroll){\n            this.state.adjustScroll = true\n            return\n        }\n\n        var availableWidth = this.getAvailableStripWidth()\n        var listWidth      = this.getCurrentListWidth()\n\n        var state = {\n            adjustScroll  : false,\n            hasLeftScroll : false,\n            hasRightScroll: false\n        }\n\n        if (listWidth > availableWidth){\n            state.maxScrollPos = listWidth - availableWidth + this.props.scrollerWidth\n            state.hasLeftScroll = this.state.scrollPos !== 0\n            state.hasRightScroll = this.state.scrollPos != state.maxScrollPos\n        } else {\n            state.maxScrollPos = 0\n            state.scrollPos    = 0\n        }\n\n        this.setState(state)\n    },\n\n    getCurrentListWidth: function(){\n        return this.refs.list.getDOMNode().offsetWidth\n    },\n\n    getAvailableStripWidth: function(){\n        var dom     = this.getDOMNode()\n        var domComputedStyle = window.getComputedStyle(dom)\n\n        var leftPadding = parseInt(domComputedStyle.left, 10)\n        var rightPadding = parseInt(domComputedStyle.right, 10)\n\n        if (isNaN(leftPadding)){\n            leftPadding = 0\n        }\n        if (isNaN(rightPadding)){\n            rightPadding = 0\n        }\n\n        return dom.clientWidth - leftPadding - rightPadding\n    },\n\n    handleScrollLeft: function(event){\n        event.preventDefault()\n        this.handleScroll(-1)\n    },\n\n    handleScrollRight: function(event){\n        event.preventDefault()\n        this.handleScroll(1)\n    },\n\n    handleScrollLeftMax: function(event){\n        event.preventDefault()\n        this.handleScrollMax(-1)\n    },\n\n    handleScrollRightMax: function(event){\n        event.preventDefault()\n        this.handleScrollMax(1)\n    },\n\n    handleScrollMax: function(direction){\n        var maxPos = direction == -1?\n                        0:\n                        this.state.maxScrollPos\n\n        this.setScrollPosition(maxPos)\n    },\n\n    handleScroll: function(direction /*1 to right, -1 to left*/){\n        var mouseUpListener = function(){\n            this.stopScroll()\n            window.removeEventListener('mouseup', mouseUpListener)\n        }.bind(this)\n\n        window.addEventListener('mouseup', mouseUpListener)\n\n        this.scrollInterval = setInterval(this.doScroll.bind(this, direction), this.props.scrollSpeed)\n    },\n\n    doScroll: function(direction){\n        this.setState({\n            scrollDirection: direction\n        })\n\n        var newScrollPos = this.state.scrollPos + direction * this.props.scrollStep\n\n        this.setScrollPosition(newScrollPos)\n    },\n\n    setScrollPosition: function(scrollPos){\n        if (scrollPos > this.state.maxScrollPos){\n            scrollPos = this.state.maxScrollPos\n        }\n\n        if (scrollPos < 0){\n            scrollPos = 0\n        }\n\n        this.setState({\n            scrollPos: scrollPos,\n            scrolling : true\n        })\n    },\n\n    stopScroll: function(){\n        clearInterval(this.scrollInterval)\n\n        this.setState({\n            scrolling: false\n        })\n    },\n\n    getDefaultProps: function(){\n        return {\n            onWindowResizeBuffer: 50,\n            scrollStep  : 5,\n            scrollSpeed : 50,\n            scrollerWidth : 5,\n\n            enableScroll: false,\n            hasLeftScroll: false,\n            hasRightScroll: false,\n            activeClassName: '',\n            activeStyle: {},\n\n            anchorStyle: {\n                color         : 'inherit',\n                textDecoration: 'inherit'\n            }\n        }\n    },\n\n    render: function(){\n        var props = copy(this.props)\n\n        var activeIndex = props.activeIndex || 0\n\n        var anchorStyle     = props.anchorStyle\n        var activeStyle     = props.activeStyle\n        var activeClassName = props.activeClassName\n\n        var baseStyle = copy(LIST_ITEM_STYLE)\n        copy(props.titleStyle, baseStyle)\n\n        var baseClassName = [props.titleClassName || '', 'tab-panel-item-title']\n\n        var nodes = props.children.map(function(child, index){\n            var props = child.props\n            var title = props.tabTitle || props.title\n\n            var titleStyle = copy(baseStyle)\n\n            //ALLOW each item to also specify a titleStyle\n            copy(props.titleStyle, titleStyle)\n\n            //and a titleClassName\n            var titleClassName = baseClassName.concat(props.titleClassName || '')\n\n            if (index == activeIndex){\n                copy(activeStyle, titleStyle)\n                titleClassName.push(activeClassName || '')\n            }\n\n            return (\n                <li key={index} onClick={this.handleChange.bind(this, index)} style={titleStyle}\n                    className={titleClassName.join(' ')}\n                >\n                    <a href=\"#\" style={anchorStyle}>{title}</a>\n                </li>\n            )\n        }, this)\n\n        props.className = props.className || ''\n        props.className += ' tab-panel-strip'\n\n        props.style = props.style || {}\n        props.style.position = 'relative'\n\n        var listStyle = copy(LIST_STYLE)\n        if (this.state.scrollPos){\n            listStyle.left = -this.state.scrollPos\n        }\n\n        var scrollerLeft = this.renderScroller(-1)\n        var scrollerRight= this.renderScroller(1)\n\n        return (\n            <nav {...props}>\n                <ul ref=\"list\" style={listStyle}>\n                    {nodes}\n                </ul>\n                {scrollerLeft}\n                {scrollerRight}\n            </nav>\n        )\n    },\n\n    handleChange: function(index, event){\n        event.preventDefault()\n\n        this.props.onChange(index)\n    },\n\n    renderScroller: function(direction){\n\n        if (!this.props.enableScroll){\n            return\n        }\n\n        var onDoubleClick = direction == -1?\n                                this.handleScrollLeftMax:\n                                this.handleScrollRightMax\n\n        var onMouseDown = direction == -1?\n                            this.handleScrollLeft:\n                            this.handleScrollRight\n\n        var side = direction == -1? 'left': 'right'\n        var visible = direction == -1?\n                            this.state.hasLeftScroll:\n                            this.state.hasRightScroll\n\n        return ScrollerFactory({\n            factory      : this.props.scrollerFactory,\n            active       : this.state.scrollDirection==direction && this.state.scrolling,\n            onDoubleClick: onDoubleClick,\n            onMouseDown  : onMouseDown,\n            style        : this.props.scrollerStyle,\n            side         : side,\n            width        : this.props.scrollerWidth,\n            visible      : visible\n        })\n    }\n})",
			"file": "src/Strip.jsx",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 9782,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "'use strict';\n\nvar React  = require('react')\nvar copy   = require('copy-utils').copy\nvar buffer = require('functionally').buffer\n\nvar LIST_ITEM_STYLE = {\n    display: 'inline-block'\n}\n\nvar LIST_STYLE = {\n    margin   : 0,\n    padding  : 0,\n    listStyle: 'none',\n    position : 'relative',\n    display  : 'inline-block'\n}\n\nvar SCROLLER_STYLE = {\n    top       : 0,\n    position  : 'absolute',\n    display   : 'inline-block',\n    height    : '100%',\n    cursor    : 'pointer'\n}\n\nvar Scroller = React.createClass({displayName: 'Scroller',\n\n    display: 'Scroller',\n\n    getDefaultProps: function(){\n        return {\n            width: 5\n        }\n    },\n\n    render: function(){\n        var props = this.props\n        var side = this.props.side\n\n        props.className = props.className || ''\n        props.className += ' tab-panel-scroller ' + side\n\n        if (props.active && props.visible){\n            props.className += ' active'\n        }\n\n        var scrollerStyle = copy(SCROLLER_STYLE)\n        scrollerStyle.width = props.width\n\n        props.style = copy(props.style, scrollerStyle)\n\n        props.style[side] = 0\n\n        if (!props.visible){\n            props.style.display = 'none'\n        }\n\n        return props.factory?\n                    props.factory(props):\n                    React.createElement(\"div\", React.__spread({},  props))\n    }\n})\n\nvar ScrollerFactory = React.createFactory(Scroller)\n\nmodule.exports = React.createClass({displayName: 'exports',\n\n    display: 'TabPanel.Strip',\n\n    propTypes: {\n        activeIndex    : React.PropTypes.number,\n        activeStyle    : React.PropTypes.object,\n        activeClassName: React.PropTypes.string,\n\n        titleStyle    : React.PropTypes.object,\n        titleClassName: React.PropTypes.string,\n\n        anchorStyle   : React.PropTypes.object,\n        scrollerStyle : React.PropTypes.object,\n        scrollerWidth : React.PropTypes.number,\n\n        scrollStep    : React.PropTypes.number,\n        scrollSpeed   : React.PropTypes.number\n\n        //each item in the TabPanel can also specify a titleStyle\n        //and a titleClassName, which are added to the values in props\n    },\n\n    getInitialState: function(){\n        return {\n            adjustScroll: true,\n            scrollPos   : 0\n        }\n    },\n\n    componentWillUnmount: function(){\n        if (this.props.enableScroll){\n            window.removeEventListener('resize', this.onResizeListener)\n        }\n    },\n\n    componentDidMount: function(){\n        if (this.props.enableScroll){\n            this.adjustScroll()\n\n            window.addEventListener('resize', this.onResizeListener = buffer(this.onWindowResize, this.props.onWindowResizeBuffer, this))\n        }\n    },\n\n    componentDidUpdate: function(){\n        this.props.enableScroll && this.adjustScroll()\n    },\n\n    onWindowResize: function(){\n        this.adjustScroll()\n        this.doScroll(0)\n    },\n\n    adjustScroll: function(){\n        if (!this.props.enableScroll){\n            return\n        }\n\n        if (!this.state.adjustScroll){\n            this.state.adjustScroll = true\n            return\n        }\n\n        var availableWidth = this.getAvailableStripWidth()\n        var listWidth      = this.getCurrentListWidth()\n\n        var state = {\n            adjustScroll  : false,\n            hasLeftScroll : false,\n            hasRightScroll: false\n        }\n\n        if (listWidth > availableWidth){\n            state.maxScrollPos = listWidth - availableWidth + this.props.scrollerWidth\n            state.hasLeftScroll = this.state.scrollPos !== 0\n            state.hasRightScroll = this.state.scrollPos != state.maxScrollPos\n        } else {\n            state.maxScrollPos = 0\n            state.scrollPos    = 0\n        }\n\n        this.setState(state)\n    },\n\n    getCurrentListWidth: function(){\n        return this.refs.list.getDOMNode().offsetWidth\n    },\n\n    getAvailableStripWidth: function(){\n        var dom     = this.getDOMNode()\n        var domComputedStyle = window.getComputedStyle(dom)\n\n        var leftPadding = parseInt(domComputedStyle.left, 10)\n        var rightPadding = parseInt(domComputedStyle.right, 10)\n\n        if (isNaN(leftPadding)){\n            leftPadding = 0\n        }\n        if (isNaN(rightPadding)){\n            rightPadding = 0\n        }\n\n        return dom.clientWidth - leftPadding - rightPadding\n    },\n\n    handleScrollLeft: function(event){\n        event.preventDefault()\n        this.handleScroll(-1)\n    },\n\n    handleScrollRight: function(event){\n        event.preventDefault()\n        this.handleScroll(1)\n    },\n\n    handleScrollLeftMax: function(event){\n        event.preventDefault()\n        this.handleScrollMax(-1)\n    },\n\n    handleScrollRightMax: function(event){\n        event.preventDefault()\n        this.handleScrollMax(1)\n    },\n\n    handleScrollMax: function(direction){\n        var maxPos = direction == -1?\n                        0:\n                        this.state.maxScrollPos\n\n        this.setScrollPosition(maxPos)\n    },\n\n    handleScroll: function(direction /*1 to right, -1 to left*/){\n        var mouseUpListener = function(){\n            this.stopScroll()\n            window.removeEventListener('mouseup', mouseUpListener)\n        }.bind(this)\n\n        window.addEventListener('mouseup', mouseUpListener)\n\n        this.scrollInterval = setInterval(this.doScroll.bind(this, direction), this.props.scrollSpeed)\n    },\n\n    doScroll: function(direction){\n        this.setState({\n            scrollDirection: direction\n        })\n\n        var newScrollPos = this.state.scrollPos + direction * this.props.scrollStep\n\n        this.setScrollPosition(newScrollPos)\n    },\n\n    setScrollPosition: function(scrollPos){\n        if (scrollPos > this.state.maxScrollPos){\n            scrollPos = this.state.maxScrollPos\n        }\n\n        if (scrollPos < 0){\n            scrollPos = 0\n        }\n\n        this.setState({\n            scrollPos: scrollPos,\n            scrolling : true\n        })\n    },\n\n    stopScroll: function(){\n        clearInterval(this.scrollInterval)\n\n        this.setState({\n            scrolling: false\n        })\n    },\n\n    getDefaultProps: function(){\n        return {\n            onWindowResizeBuffer: 50,\n            scrollStep  : 5,\n            scrollSpeed : 50,\n            scrollerWidth : 5,\n\n            enableScroll: false,\n            hasLeftScroll: false,\n            hasRightScroll: false,\n            activeClassName: '',\n            activeStyle: {},\n\n            anchorStyle: {\n                color         : 'inherit',\n                textDecoration: 'inherit'\n            }\n        }\n    },\n\n    render: function(){\n        var props = copy(this.props)\n\n        var activeIndex = props.activeIndex || 0\n\n        var anchorStyle     = props.anchorStyle\n        var activeStyle     = props.activeStyle\n        var activeClassName = props.activeClassName\n\n        var baseStyle = copy(LIST_ITEM_STYLE)\n        copy(props.titleStyle, baseStyle)\n\n        var baseClassName = [props.titleClassName || '', 'tab-panel-item-title']\n\n        var nodes = props.children.map(function(child, index){\n            var props = child.props\n            var title = props.tabTitle || props.title\n\n            var titleStyle = copy(baseStyle)\n\n            //ALLOW each item to also specify a titleStyle\n            copy(props.titleStyle, titleStyle)\n\n            //and a titleClassName\n            var titleClassName = baseClassName.concat(props.titleClassName || '')\n\n            if (index == activeIndex){\n                copy(activeStyle, titleStyle)\n                titleClassName.push(activeClassName || '')\n            }\n\n            return (\n                React.createElement(\"li\", {key: index, onClick: this.handleChange.bind(this, index), style: titleStyle, \n                    className: titleClassName.join(' ')\n                }, \n                    React.createElement(\"a\", {href: \"#\", style: anchorStyle}, title)\n                )\n            )\n        }, this)\n\n        props.className = props.className || ''\n        props.className += ' tab-panel-strip'\n\n        props.style = props.style || {}\n        props.style.position = 'relative'\n\n        var listStyle = copy(LIST_STYLE)\n        if (this.state.scrollPos){\n            listStyle.left = -this.state.scrollPos\n        }\n\n        var scrollerLeft = this.renderScroller(-1)\n        var scrollerRight= this.renderScroller(1)\n\n        return (\n            React.createElement(\"nav\", React.__spread({},  props), \n                React.createElement(\"ul\", {ref: \"list\", style: listStyle}, \n                    nodes\n                ), \n                scrollerLeft, \n                scrollerRight\n            )\n        )\n    },\n\n    handleChange: function(index, event){\n        event.preventDefault()\n\n        this.props.onChange(index)\n    },\n\n    renderScroller: function(direction){\n\n        if (!this.props.enableScroll){\n            return\n        }\n\n        var onDoubleClick = direction == -1?\n                                this.handleScrollLeftMax:\n                                this.handleScrollRightMax\n\n        var onMouseDown = direction == -1?\n                            this.handleScrollLeft:\n                            this.handleScrollRight\n\n        var side = direction == -1? 'left': 'right'\n        var visible = direction == -1?\n                            this.state.hasLeftScroll:\n                            this.state.hasRightScroll\n\n        return ScrollerFactory({\n            factory      : this.props.scrollerFactory,\n            active       : this.state.scrollDirection==direction && this.state.scrolling,\n            onDoubleClick: onDoubleClick,\n            onMouseDown  : onMouseDown,\n            style        : this.props.scrollerStyle,\n            side         : side,\n            width        : this.props.scrollerWidth,\n            visible      : visible\n        })\n    }\n})",
			"file": "lib/Strip.js",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 9878,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "'use strict';\n\nvar React = require('react')\nvar copy  = require('copy-utils').copy\n\nmodule.exports = React.createClass({\n\n    displayName: 'TabPanel.Container',\n\n    propTypes: {\n        activeIndex     : React.PropTypes.number,\n\n        defaultClassName: React.PropTypes.string,\n        defaultStyle    : React.PropTypes.object,\n\n        hiddenStyle     : React.PropTypes.object,\n\n        activeClassName : React.PropTypes.string,\n        activeStyle     : React.PropTypes.object\n    },\n\n    getDefaultProps: function(){\n        return {\n            activeIndex: 0,\n            hiddenStyle: {\n                display: 'none'\n            }\n        }\n    },\n\n    render: function(){\n\n        return (\n            React.createElement(\"section\", {className: \"tab-panel-container\"},\n                this.props.children.map(this.renderItem, this)\n            )\n        )\n    },\n\n    renderItem: function(item, index, array){\n        var props = this.props\n\n        var hiddenStyle = props.hiddenStyle\n        var activeIndex = props.activeIndex || 0\n\n        //make sure the wrapping article gets the correct style\n        //if it is the active item\n        var style = {}\n        var className = 'tab-panel-item '\n\n        if (index !== activeIndex){\n            copy(hiddenStyle, style)\n        } else {\n            copy(props.activeStyle, style)\n            className += props.activeClassName || ''\n        }\n\n        //default style for items\n        if (props.defaultStyle){\n            item.props.style = copy(props.defaultStyle, item.props.style)\n        }\n\n        //default className for items\n        if (props.defaultClassName){\n            item.props.className = item.props.className || ''\n            item.props.className += ' ' + props.defaultClassName\n        }\n\n        return React.createElement(\"article\", {key: index, style: style, className: className})\n    }\n})",
			"file": "lib/Container.js",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 1877,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "'use strict';\n\nvar React = require('react')\nvar copy  = require('copy-utils').copy\n\nmodule.exports = React.createClass({\n\n    displayName: 'TabPanel.Container',\n\n    propTypes: {\n        activeIndex     : React.PropTypes.number,\n\n        defaultClassName: React.PropTypes.string,\n        defaultStyle    : React.PropTypes.object,\n\n        hiddenStyle     : React.PropTypes.object,\n\n        activeClassName : React.PropTypes.string,\n        activeStyle     : React.PropTypes.object\n    },\n\n    getDefaultProps: function(){\n        return {\n            activeIndex: 0,\n            hiddenStyle: {\n                display: 'none'\n            }\n        }\n    },\n\n    render: function(){\n\n        return (\n            React.createElement(\"section\", {className: \"tab-panel-container\"},\n                this.props.children.map(this.renderItem, this)\n            )\n        )\n    },\n\n    renderItem: function(item, index, array){\n        var props = this.props\n\n        var hiddenStyle = props.hiddenStyle\n        var activeIndex = props.activeIndex || 0\n\n        //make sure the wrapping article gets the correct style\n        //if it is the active item\n        var style = {}\n        var className = 'tab-panel-item '\n\n        if (index !== activeIndex){\n            copy(hiddenStyle, style)\n        } else {\n            copy(props.activeStyle, style)\n            className += props.activeClassName || ''\n        }\n\n        //default style for items\n        if (props.defaultStyle){\n            item.props.style = copy(props.defaultStyle, item.props.style)\n        }\n\n        //default className for items\n        if (props.defaultClassName){\n            item.props.className = item.props.className || ''\n            item.props.className += ' ' + props.defaultClassName\n        }\n\n        return <article key={index} style={style} className={className} />\n    }\n})",
			"file": "src/Container.jsx",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 1856,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 1 file for \"stripposition\"\n\n0 matches across 0 files\n\n\nSearching 1 file for \"tabVerticalPosition\"\n\n0 matches across 0 files\n",
			"settings":
			{
				"buffer_size": 134,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "style/index.styl",
			"settings":
			{
				"buffer_size": 687,
				"line_ending": "Unix"
			}
		},
		{
			"file": "dist/react-tab-panel.js",
			"settings":
			{
				"buffer_size": 63227,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"du",
				"File: Duplicate"
			],
			[
				"mar",
				"Markdown Preview: Preview in Browser"
			],
			[
				"mark",
				"Markdown Preview: Preview in Browser"
			],
			[
				"dele",
				"File: Delete"
			],
			[
				"dup",
				"File: Duplicate"
			],
			[
				"rena",
				"File: Rename"
			],
			[
				"enable lin",
				"SublimeLinter: Enable Linting"
			],
			[
				"disa",
				"SublimeLinter: Disable Linting"
			],
			[
				"dee",
				"File: Delete"
			],
			[
				"re",
				"File: Rename"
			],
			[
				"move",
				"File: Move"
			],
			[
				"linter",
				"SublimeLinter: Lint This View"
			],
			[
				"ss javasc",
				"Set Syntax: JavaScript"
			],
			[
				"lint",
				"SublimeLinter: Lint This View"
			],
			[
				"lint ",
				"SublimeLinter: Lint This View"
			],
			[
				"sublime linter li",
				"SublimeLinter: Lint This View"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"ren",
				"File: Rename"
			],
			[
				"delete",
				"File: Delete"
			],
			[
				"mardk",
				"Markdown Preview: Preview in Browser"
			],
			[
				"ss javas",
				"Set Syntax: JavaScript"
			],
			[
				"del",
				"File: Delete"
			],
			[
				"deke",
				"Bower: Discover packages"
			],
			[
				"ss json",
				"Set Syntax: JSON"
			],
			[
				"markd",
				"Markdown Preview: Preview in Browser"
			],
			[
				"markdo",
				"Markdown Preview: Preview in Browser"
			],
			[
				"renam",
				"File: Rename"
			],
			[
				"Rena",
				"File: Rename"
			],
			[
				"de",
				"File: Delete"
			],
			[
				"ss sass",
				"Set Syntax: Sass"
			],
			[
				"brows",
				"Preferences: Browse Packages"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"update",
				"Package Control: Upgrade/Overwrite All Packages"
			],
			[
				"ss text",
				"Set Syntax: Plain Text"
			],
			[
				"jsx	",
				"Snippet: React: /** @jsx */"
			],
			[
				"ss ja",
				"Set Syntax: Jade"
			],
			[
				"ss js",
				"Set Syntax: JSON"
			],
			[
				"pretty j",
				"Pretty JSON: Format (Pretty Print) JSON"
			],
			[
				"pretty ",
				"Pretty JSON: Format (Pretty Print) JSON"
			],
			[
				"pretty json",
				"Pretty JSON: JSON 2 XML"
			],
			[
				"json p",
				"Pretty JSON: Format (Pretty Print) JSON"
			],
			[
				"pretty",
				"Pretty JSON: Format (Pretty Print) JSON"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"markdow",
				"Markdown Preview: Preview in Browser"
			],
			[
				"ss sa",
				"Set Syntax: Sass"
			],
			[
				"ss sty",
				"Set Syntax: Stylus"
			],
			[
				"ss java",
				"Set Syntax: JavaScript"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"ss live",
				"Set Syntax: LiveScript"
			]
		],
		"width": 593.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/radu/code/react-tab-panel",
		"/home/radu/code/react-tab-panel/dist",
		"/home/radu/code/react-tab-panel/src",
		"/home/radu/code/react-tab-panel/style"
	],
	"file_history":
	[
		"/home/radu/code/react-tab-panel/node_modules/webpack/lib/web/WebEnvironmentPlugin.js",
		"/home/radu/code/react-tab-panel/webpack.config.js",
		"/home/radu/code/react-tab-panel/index.css",
		"/home/radu/code/react-tab-panel/index.styl",
		"/home/radu/code/react-tab-panel/src/index.jsx",
		"/home/radu/code/react-tab-panel/index.html",
		"/home/radu/code/react-tab-panel/package.json",
		"/home/radu/code/react-tab-panel/node_modules/react/lib/isNode.js",
		"/home/radu/code/react-tab-panel/node_modules/react/lib/ReactElement.js",
		"/home/radu/code/react-tab-panel/README.md",
		"/home/radu/code/react-basic-tabs/node_modules/webpack/bin/config-optimist.js",
		"/home/radu/code/react-basic-tabs/lib/index.js",
		"/home/radu/code/react-basic-tabs/index.jsx",
		"/home/radu/code/react-basic-tabs/index.html",
		"/home/radu/code/entity-designer/lib/ui/TabPanel/index.jsx",
		"/home/radu/code/entity-designer/src/js/widgets/Label/index.jsx",
		"/home/radu/code/entity-designer/src/js/model/clone.js",
		"/home/radu/code/entity-designer/src/js/views/items/Canvas.jsx",
		"/home/radu/code/entity-designer/old.index.html",
		"/home/radu/code/entity-designer/src/js/render/snapOnMove.js",
		"/home/radu/code/entity-designer/src/js/model/factories/TabPanel.js",
		"/home/radu/code/entity-designer/src/resources/css/ItemProxy.styl",
		"/home/radu/code/entity-designer/index.html",
		"/home/radu/code/entity-designer/lib/widget/Manager/generateId.js",
		"/home/radu/code/entity-designer/src/js/render/getNodeInnerRegion.js",
		"/home/radu/code/entity-designer/src/js/render/getSnapRegions.js",
		"/home/radu/code/entity-designer/src/js/views/items/Tree.jsx",
		"/home/radu/code/entity-designer/src/js/model/ItemFactory.js",
		"/home/radu/code/entity-designer/src/js/render/cloneItem.js",
		"/home/radu/code/entity-designer/src/js/render/render.js",
		"/home/radu/code/entity-designer/src/js/widgets/Tab/index.js",
		"/home/radu/code/entity-designer/package.json",
		"/home/radu/code/entity-designer/src/js/widgets/props/style/border.js",
		"/home/radu/code/entity-designer/src/js/widgets/props/style/width.js",
		"/home/radu/code/entity-designer/src/js/widgets/props/style/size.js",
		"/home/radu/code/entity-designer/src/js/render/getItemRegion.js",
		"/home/radu/code/entity-designer/src/js/widgets/props/theLabel.js",
		"/home/radu/code/entity-designer/lib/property-grid/src/getLabel.js",
		"/home/radu/code/entity-designer/lib/property-grid/lib/getLabel.js",
		"/home/radu/code/entity-designer/src/js/model/factories/Label.js",
		"/home/radu/code/entity-designer/loaders.config.js",
		"/home/radu/code/entity-designer/src/resources/css/tree.styl",
		"/home/radu/code/entity-designer/src/js/widgets/TabPanel/index.js",
		"/home/radu/code/entity-designer/dev.html",
		"/home/radu/code/entity-designer/src/resources/css/widgets/TabPanel.styl",
		"/home/radu/code/entity-designer/src/js/widgets/props/style/margin.js",
		"/home/radu/code/entity-designer/src/js/widgets/props/style/position.js",
		"/home/radu/code/entity-designer/src/resources/css/Item.styl",
		"/home/radu/code/entity-designer/Roadmap.md",
		"/home/radu/code/entity-designer/src/resources/css/PositionTip.styl",
		"/home/radu/code/entity-designer/src/js/main.js",
		"/home/radu/code/entity-designer/src/js/ToolboxItem.jsx",
		"/home/radu/code/entity-designer/lib/ui/tree/index.jsx",
		"/home/radu/code/entity-designer/src/js/ToolArea.jsx",
		"/home/radu/code/entity-designer/src/js/widgets/props/style/borderRadius.js",
		"/home/radu/code/entity-designer/src/js/widgets/props/style/background.js",
		"/home/radu/code/entity-designer/bundle.js",
		"/home/radu/code/entity-designer/src/js/utils/PropertyMapper.js",
		"/home/radu/code/entity-designer/src/js/render/PropertyManager.js",
		"/home/radu/code/entity-designer/src/js/state/PROXY_ELEMENTS.js",
		"/home/radu/code/entity-designer/src/js/widgets/create.js",
		"/home/radu/code/entity-designer/src/js/widgets/base/define.js",
		"/home/radu/code/entity-designer/src/js/widgets/base/WidgetMixin.js",
		"/home/radu/code/entity-designer/src/js/widgets/props/style/height.js",
		"/home/radu/code/entity-designer/src/js/widgets/Label/props.js",
		"/home/radu/code/entity-designer/Gulpfile.js",
		"/home/radu/code/entity-designer/src/js/widgets/props/style/textAlign.js",
		"/home/radu/code/entity-designer/src/js/widgets/props/style/index.js",
		"/home/radu/code/entity-designer/src/js/data/SelectionManager.js",
		"/home/radu/code/entity-designer/src/js/data/ItemsManager.js",
		"/home/radu/code/entity-designer/src/js/actionsx/AddWidget.js",
		"/home/radu/code/entity-designer/entity-designer.sublime-project",
		"/home/radu/code/entity-designer/src/js/actionsx/PropertyChange.js",
		"/home/radu/code/entity-designer/src/js/actionsx/index.js",
		"/home/radu/code/entity-designer/src/js/render/createItem.js",
		"/home/radu/code/entity-designer/src/js/actionsx/UpdateWidgetPosition.js",
		"/home/radu/code/entity-designer/src/js/render/getItemComponent.js",
		"/home/radu/code/entity-designer/src/js/state/SelectorManager.js",
		"/home/radu/code/entity-designer/src/js/views/selected/Selector.jsx",
		"/home/radu/code/entity-designer/src/js/render/setupDrag.js",
		"/home/radu/code/entity-designer/src/js/state/SnapManager.js",
		"/home/radu/code/entity-designer/src/js/model/factories/index.js",
		"/home/radu/code/entity-designer/vendor/zippyui-1.0.2/font/FontAwesome.otf",
		"/home/radu/code/entity-designer/src/js/render/mixin.js",
		"/home/radu/code/entity-designer/src/js/widgets/Line/props.js",
		"/home/radu/code/entity-designer/src/js/widgets/props/id.js",
		"/home/radu/code/entity-designer/src/js/widgets/props/style/flex.js",
		"/home/radu/code/entity-designer/src/js/widgets/Container/props.js",
		"/home/radu/code/entity-designer/src/js/widgets/Tab/props.js",
		"/home/radu/code/entity-designer/src/js/Designer.jsx",
		"/home/radu/code/entity-designer/src/js/widgets/props/style/padding.js",
		"/home/radu/code/entity-designer/lib/ui/NumberFieldConfig.jsx",
		"/home/radu/code/entity-designer/src/js/widgets/props/index.js",
		"/home/radu/code/entity-designer/src/js/widgets/props/style/zIndex.js",
		"/home/radu/code/entity-designer/src/js/widgets/props/style/wrapText.js",
		"/home/radu/code/entity-designer/test/PropertyMapperTest.js",
		"/home/radu/code/entity-designer/src/js/utils/RegionTip.jsx",
		"/home/radu/code/entity-designer/src/js/widgets/props/anchor.js",
		"/home/radu/code/entity-designer/src/js/widgets/index.js",
		"/home/radu/code/entity-designer/src/js/widgets/mapper.js",
		"/home/radu/code/entity-designer/src/js/widgets/props/dock.js",
		"/home/radu/code/entity-designer/src/js/widgets/props/display.js",
		"/home/radu/code/entity-designer/src/js/widgets/props/style/overflow.js",
		"/home/radu/code/entity-designer/src/js/widgets/props/activeIndex.js",
		"/home/radu/code/entity-designer/src/js/widgets/props/style/ellipsis.js",
		"/home/radu/code/entity-designer/src/js/widgets/props/style/font.js",
		"/home/radu/code/entity-designer/src/js/views/items/ProxyContainer.jsx",
		"/home/radu/code/entity-designer/src/js/widgets/config.js",
		"/home/radu/code/entity-designer/src/js/render/handleItemAnchor.js",
		"/home/radu/code/entity-designer/src/js/widgets/Line/index.jsx",
		"/home/radu/code/entity-designer/lib/ui/TextField.jsx",
		"/home/radu/code/entity-designer/test.html",
		"/home/radu/code/entity-designer/src/js/views/items/ItemProxy.jsx",
		"/home/radu/code/entity-designer/src/js/widgets/Container/index.js",
		"/home/radu/code/entity-designer/src/js/render/getProxyPositionFromItemNode.js",
		"/home/radu/code/entity-designer/src/js/render/getItemAnchor.js",
		"/home/radu/code/entity-designer/src/js/render/getAbsoluteItemInnerRegion.js",
		"/home/radu/code/entity-designer/src/resources/css/widgets/index.styl",
		"/home/radu/code/entity-designer/src/resources/css/index.styl",
		"/home/radu/code/entity-designer/src/resources/css/ProxyContainer.styl",
		"/home/radu/code/entity-designer/lib/ui/TabPanel/index.styl",
		"/home/radu/code/entity-designer/src/resources/css/widgets.styl",
		"/home/radu/code/entity-designer/src/js/render/createProxy.js",
		"/home/radu/code/entity-designer/src/js/state/ProxyManager.js",
		"/home/radu/code/entity-designer/src/js/render/getAbsoluteItemRegion.js",
		"/home/radu/code/entity-designer/src/js/state/ITEM_ELEMENTS.js",
		"/home/radu/code/entity-designer/.idea/misc.xml",
		"/home/radu/code/entity-designer/node_modules/react/lib/ReactElement.js"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"/home/radu/code/react-tab-panel/src,*.jsx, *.js",
			"/home/radu/code/entity-designer/src,*.jsx, *.js",
			"/home/radu/code/entity-designer/lib,*.jsx, *.js",
			"/home/radu/code/entity-designer/src,*.jsx, *.js",
			"/home/radu/code/entity-designer/node_modules/traceur-loader,*.jsx, *.js",
			"/home/radu/code/entity-designer/node_modules/traceur-runtime,*.jsx, *.js",
			"/home/radu/code/entity-designer/node_modules/traceur-*,*.jsx, *.js",
			"/home/radu/code/entity-designer/src,*.jsx, *.js",
			"/home/radu/code/entity-designer/lib,*.jsx, *.js",
			"/home/radu/code/entity-designer/src,*.jsx, *.js",
			"/home/radu/code/entity-designer/,*.jsx, *.js",
			"/home/radu/code/entity-designer/lib,*.jsx, *.js",
			"/home/radu/code/entity-designer/,*.jsx, *.js",
			"/home/radu/code/entity-designer/src,*.jsx, *.js",
			"/home/radu/code/entity-designer/,*.jsx, *.js",
			"/home/radu/code/entity-designer/src,*.jsx, *.js",
			"/home/radu/code/entity-designer/lib/ui/,*.jsx, *.js",
			"/home/radu/code/entity-designer/lib/ui/**.*",
			"/home/radu/code/entity-designer/lib/ui/*.*",
			"/home/radu/code/entity-designer/lib/ui",
			"/home/radu/code/entity-designer/src",
			"/home/radu/code/entity-designer/",
			"/home/radu/code/entity-designer/src",
			"/home/radu/code/entity-designer/lib",
			"/home/radu/code/entity-designer/src/js",
			"/home/radu/code/entity-designer/",
			"/home/radu/code/entity-designer/lib/widget",
			"/home/radu/code/entity-designer/lib",
			"/home/radu/code/entity-designer/src/js",
			"/home/radu/code/entity-designer/",
			"/home/radu/code/entity-designer/src/js",
			"/home/radu/code/entity-designer/",
			"/home/radu/code/entity-designer/src/js",
			"/home/radu/code/entity-designer/",
			"/home/radu/code/entity-designer/src/js",
			"/home/radu/code/entity-designer/",
			"/home/radu/code/entity-designer/src/js",
			"/home/radu/code/entity-designer/src",
			"/home/radu/code/entity-designer/",
			"/home/radu/code/entity-designer/src",
			"/home/radu/code/entity-designer",
			"/home/radu/code/entity-hapi/logs",
			"/home/radu/code/entity-hapi",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"positi",
			"tabVerticalPosition",
			"bottom",
			"stripposition",
			"tab-panel",
			"8",
			"arrowWidth",
			"baseStyle",
			"baseClassNameArray",
			"baseClassName",
			"titleClassName",
			"baseClassName",
			"baseStyle",
			"BASE_CLASS_NAME",
			"basic-tabs",
			"stripFactory",
			"defaultStyle",
			"activeTitleStyle",
			"props.titleStyle",
			"props.",
			"copyList",
			"StripFactory",
			"tab-panel",
			"react-tab-panel",
			"ids'",
			"cmp.props.onTreeContextMenu",
			"item",
			"exportedFn",
			"top",
			"getItemComponent",
			"ItemsManager",
			"onMouseDown",
			"onDoubleClick",
			"ItemsManager",
			"remove",
			"onMenuClick",
			"AppState",
			"getItemComponent",
			"onNodeClick",
			"handleNodeMouseDown",
			"titleStyle",
			"styleTarget",
			"mapping:",
			"styleTarget",
			"size",
			"height",
			"size",
			"height",
			"flux-action'",
			"addwidget'",
			"flux-action'",
			"reacty'",
			"move:",
			"move",
			"ItemsManager.move([item]).to(info.parent)",
			"DRAG_TARGET",
			"isDragging",
			"numeric",
			"console",
			"getElementById",
			"getItemById",
			"DRAG_TARGET",
			"setupdrag",
			"defaultProps",
			"this.props.",
			"return false",
			"style.position",
			"activeIndex",
			"obj",
			"tostyle",
			"createitem",
			"visible",
			"setupDrag",
			"setupdrag",
			"resizable",
			"'fill'",
			"dock == 'fill'",
			"onUnmount",
			"p",
			"onMount",
			"proxy_elements",
			"onUnmount",
			"proxyNode.setState({",
			"getNodeInnerRegion(getConstrainNode())",
			"left",
			"getItemRegionInCanvas",
			"getAbsoluteItemRegion",
			"toStyle",
			"StateManager",
			"PROXY_ELEMENTS",
			"AlignToolbox",
			"acceptsItems",
			"renderChildren:",
			"renderChildren",
			"parentId",
			"Label",
			"var styleMappings = styleMap(props)",
			"render:",
			"renderChildren:",
			"renderChildren",
			"onItemSetParent",
			"deleteIds",
			"onitem",
			"Container",
			"getItemsMap",
			"config",
			"getSnapRegions",
			"getProperty(name)",
			"getProperty(name).showGrid",
			"validSnap",
			"beforeSnap",
			"positionAndSize",
			"top",
			"left",
			"width",
			"positionAndSize",
			"snapRegion.width",
			"left",
			"validsnap",
			"6to",
			"right",
			"positionAndSize",
			"region",
			"left",
			".at",
			"at:",
			"width",
			"Region"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 9,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "build-style.config.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 457,
						"regions":
						{
						},
						"selection":
						[
							[
								214,
								214
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"open_with_edit": true,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "index.jsx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1245,
						"regions":
						{
						},
						"selection":
						[
							[
								776,
								776
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/SublimeLinter-jsxhint/JavaScript (JSX).tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 442,
						"regions":
						{
						},
						"selection":
						[
							[
								71,
								71
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/HTML/HTML.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "webpack.config.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 294,
						"regions":
						{
						},
						"selection":
						[
							[
								199,
								199
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "loaders.config.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 515,
						"regions":
						{
						},
						"selection":
						[
							[
								472,
								472
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "package.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1711,
						"regions":
						{
						},
						"selection":
						[
							[
								248,
								248
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "README.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3593,
						"regions":
						{
						},
						"selection":
						[
							[
								646,
								646
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"parser": "markdown",
							"syntax": "Packages/Markdown/Markdown.tmLanguage",
							"tab_size": 4,
							"target": "browser",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 90.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "Gulpfile.js",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 193,
						"regions":
						{
						},
						"selection":
						[
							[
								193,
								193
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/index.jsx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3432,
						"regions":
						{
						},
						"selection":
						[
							[
								498,
								498
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/SublimeLinter-jsxhint/JavaScript (JSX).tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 324.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "index.styl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17,
						"regions":
						{
						},
						"selection":
						[
							[
								17,
								17
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/Sass/Syntaxes/Sass.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		},
		{
			"selected": 6,
			"sheets":
			[
				{
					"buffer": 8,
					"file": "src/index.jsx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3432,
						"regions":
						{
						},
						"selection":
						[
							[
								2417,
								2417
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/SublimeLinter-jsxhint/JavaScript (JSX).tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1141.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src/Strip.jsx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9782,
						"regions":
						{
						},
						"selection":
						[
							[
								5978,
								5978
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"open_with_edit": true,
							"syntax": "Packages/SublimeLinter-jsxhint/JavaScript (JSX).tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3797.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "lib/Strip.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9878,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "lib/Container.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1877,
						"regions":
						{
						},
						"selection":
						[
							[
								639,
								639
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "src/Container.jsx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1856,
						"regions":
						{
						},
						"selection":
						[
							[
								1847,
								1847
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"open_with_edit": true,
							"syntax": "Packages/SublimeLinter-jsxhint/JavaScript (JSX).tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 261.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 14,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 134,
						"regions":
						{
						},
						"selection":
						[
							[
								134,
								134
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 2,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 72.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "style/index.styl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 687,
						"regions":
						{
						},
						"selection":
						[
							[
								231,
								231
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"open_with_edit": true,
							"syntax": "Packages/Sass/Syntaxes/Sass.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "README.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3593,
						"regions":
						{
						},
						"selection":
						[
							[
								318,
								318
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"parser": "markdown",
							"syntax": "Packages/Markdown/Markdown.tmLanguage",
							"tab_size": 4,
							"target": "browser",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "dist/react-tab-panel.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 63227,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2376.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "README.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3593,
						"regions":
						{
						},
						"selection":
						[
							[
								2036,
								2036
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"parser": "markdown",
							"syntax": "Packages/Markdown/Markdown.tmLanguage",
							"tab_size": 4,
							"target": "browser",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 272.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.524416297527,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.clipboard_manager":
	{
		"height": 118.0
	},
	"output.exec":
	{
		"height": 328.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.haskell_sublime_load":
	{
		"height": 118.0
	},
	"project": "react-tab-panel.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"index.s",
				"index.styl"
			],
			[
				"read",
				"README.md"
			],
			[
				"pac",
				"package.json"
			],
			[
				"webpac",
				"webpack.config.js"
			],
			[
				"index",
				"index.html"
			],
			[
				"loader",
				"loaders.config.js"
			],
			[
				"index.html",
				"index.html"
			],
			[
				"index.",
				"index.html"
			],
			[
				"conta",
				"src/Container.jsx"
			],
			[
				"tabpa",
				"src/resources/css/widgets/TabPanel.styl"
			],
			[
				"clonei",
				"src/js/render/cloneItem.js"
			],
			[
				"itemsm",
				"src/js/data/ItemsManager.js"
			],
			[
				"genera",
				"src/js/model/item/generateId.js"
			],
			[
				"itemfa",
				"src/js/model/ItemFactory.js"
			],
			[
				"getitemco",
				"src/js/render/getItemComponent.js"
			],
			[
				"label",
				"src/js/widgets/Label/index.jsx"
			],
			[
				"clone",
				"src/js/model/clone.js"
			],
			[
				"render",
				"src/js/render/render.js"
			],
			[
				"position",
				"src/js/widgets/props/style/position.js"
			],
			[
				"marg",
				"src/js/widgets/props/style/margin.js"
			],
			[
				"tabp",
				"src/resources/css/widgets/TabPanel.styl"
			],
			[
				"tree",
				"src/resources/css/tree.styl"
			],
			[
				"tool",
				"src/js/ToolboxItem.jsx"
			],
			[
				"border",
				"src/js/widgets/props/style/border.js"
			],
			[
				"back",
				"src/js/widgets/props/style/background.js"
			],
			[
				"propertym",
				"src/js/utils/PropertyMapper.js"
			],
			[
				"tabpan",
				"src/resources/css/widgets/TabPanel.styl"
			],
			[
				"canv",
				"src/js/views/items/Canvas.jsx"
			],
			[
				"itemsma",
				"src/js/data/ItemsManager.js"
			],
			[
				"createi",
				"src/js/render/createItem.js"
			],
			[
				"canvas",
				"src/js/views/items/Canvas.jsx"
			],
			[
				"selec",
				"src/js/data/SelectionManager.js"
			],
			[
				"factories",
				"src/js/model/factories/TabPanel.js"
			],
			[
				"define",
				"src/js/widgets/base/define.js"
			],
			[
				"wmi",
				"src/js/widgets/base/WidgetMixin.js"
			],
			[
				"defi",
				"src/js/widgets/base/define.js"
			],
			[
				"create",
				"src/js/widgets/create.js"
			],
			[
				"mapper",
				"src/js/widgets/mapper.js"
			],
			[
				"texta",
				"src/js/widgets/props/style/textAlign.js"
			],
			[
				"createite",
				"src/js/render/createItem.js"
			],
			[
				"thela",
				"src/js/widgets/props/theLabel.js"
			],
			[
				"itempr",
				"src/resources/css/ItemProxy.styl"
			],
			[
				"itempro",
				"src/js/views/items/ItemProxy.jsx"
			],
			[
				"mixin",
				"src/js/render/mixin.js"
			],
			[
				"tabindex",
				"lib/ui/TabPanel/index.jsx"
			],
			[
				"createpr",
				"src/js/render/createProxy.js"
			],
			[
				"proxym",
				"src/js/state/ProxyManager.js"
			],
			[
				"createpro",
				"src/js/render/createProxy.js"
			],
			[
				"prox",
				"src/js/state/PROXY_ELEMENTS.js"
			],
			[
				"itemele",
				"src/js/state/ITEM_ELEMENTS.js"
			],
			[
				"getregioni",
				"src/js/render/getRegionInCanvas.js"
			],
			[
				"getnodeinner",
				"src/js/render/getNodeInnerRegion.js"
			],
			[
				"getnodeinnerregion",
				"src/js/render/getNodeInnerRegion.js"
			],
			[
				"getitemre",
				"src/js/render/getItemRegionInCanvas.js"
			],
			[
				"getabsolutei",
				"src/js/render/getAbsoluteItemRegion.js"
			],
			[
				"itemprox",
				"src/js/views/items/ItemProxy.jsx"
			],
			[
				"proxycon",
				"src/js/views/items/ProxyContainer.jsx"
			],
			[
				"getsnapitems",
				"src/js/render/getSnapItems.js"
			],
			[
				"itemfac",
				"src/js/model/ItemFactory.js"
			],
			[
				"desi",
				"src/js/Designer.jsx"
			],
			[
				"selectionmanager",
				"src/js/data/SelectionManager.js"
			],
			[
				"desing",
				"src/js/Designer.jsx"
			],
			[
				"getitemparent",
				"src/js/render/getItemParent.js"
			],
			[
				"getitemsm",
				"src/js/render/getItemsMap.js"
			],
			[
				"data",
				"src/js/data/DataManager.js"
			],
			[
				"getsnapr",
				"src/js/render/getSnapRegions.js"
			],
			[
				"appda",
				"src/js/data/AppData.js"
			],
			[
				"datam",
				"src/js/data/DataManager.js"
			],
			[
				"main",
				"src/js/main.js"
			],
			[
				"snapper",
				"src/resources/css/Snapper.styl"
			],
			[
				"itemp",
				"src/resources/css/ItemProxy.styl"
			],
			[
				"packa",
				"package.json"
			],
			[
				"web",
				"webpack.config.js"
			],
			[
				"appsta",
				"src/js/state/AppState.js"
			],
			[
				"appdata",
				"src/js/data/AppData.js"
			],
			[
				"snaponm",
				"src/js/render/snapOnMove.js"
			],
			[
				"getsna",
				"src/js/render/getSnapRegions.js"
			],
			[
				"snapm",
				"src/js/state/SnapManager.js"
			],
			[
				"snapindex",
				"src/js/render/snap/index.js"
			],
			[
				"snapo",
				"src/js/render/snapOnResize.js"
			],
			[
				"canva",
				"src/js/views/items/Canvas.jsx"
			],
			[
				"snapto",
				"src/js/render/snapToGrid.js"
			],
			[
				"createitem",
				"src/js/render/createItem.js"
			],
			[
				"cprox",
				"src/js/render/createProxy.js"
			],
			[
				"snaponre",
				"src/js/render/snapOnResize.js"
			],
			[
				"handleitema",
				"src/js/render/handleItemAnchor.js"
			],
			[
				"main.j",
				"src/js/main.js"
			],
			[
				"createproxy",
				"src/js/render/createProxy.js"
			],
			[
				"getconst",
				"src/js/render/getConstrainRegion.js"
			],
			[
				"setup",
				"src/js/render/drag/setup.js"
			],
			[
				"setu",
				"src/js/render/drag/setup.js"
			],
			[
				"getuni",
				"src/js/render/getUnionRegion.js"
			],
			[
				"setupdra",
				"src/js/render/setupDrag.js"
			],
			[
				"getunion",
				"src/js/render/getUnionRegion.js"
			],
			[
				"getsnapre",
				"src/js/render/getSnapRegions.js"
			],
			[
				"selectormanager",
				"src/js/state/SelectorManager.js"
			],
			[
				"designer",
				"src/js/Designer.jsx"
			],
			[
				"selector",
				"src/js/views/selected/Selector.jsx"
			],
			[
				"road",
				"Roadmap.md"
			],
			[
				"propertiesm",
				"src/js/data/PropertiesManager.js"
			],
			[
				"snaptog",
				"src/js/render/snapToGrid.js"
			],
			[
				"snapon",
				"src/js/render/snapOnResize.js"
			],
			[
				"datama",
				"src/js/data/DataManager.js"
			],
			[
				"itemsmana",
				"src/js/data/ItemsManager.js"
			],
			[
				"getitemr",
				"src/js/render/getItemRegion.js"
			],
			[
				"getabsoluteiteminnerregion",
				"src/js/render/getAbsoluteItemInnerRegion.js"
			],
			[
				"getiteminner",
				"src/js/render/getItemInnerRegionInCanvas.js"
			],
			[
				"snaponr",
				"src/js/render/snapOnResize.js"
			],
			[
				"setupd",
				"src/js/render/setupDrag.js"
			],
			[
				"hia",
				"src/js/render/handleItemAnchor.js"
			],
			[
				"createprox",
				"src/js/render/createProxy.js"
			],
			[
				"snapt",
				"src/js/render/snapToGrid.js"
			],
			[
				"getdiff",
				"src/js/render/snap/getDiffBetween.js"
			],
			[
				"rendersnapindex",
				"src/js/render/snap/index.js"
			],
			[
				"mindiff",
				"src/js/render/snap/minDiffFor.js"
			],
			[
				"atool",
				"src/js/views/items/AlignToolbox.jsx"
			],
			[
				"statem",
				"src/js/state/StateManager.js"
			],
			[
				"getcons",
				"src/js/render/getConstrainRegion.js"
			],
			[
				"getconstrain",
				"src/js/render/getConstrainRegion.js"
			],
			[
				"wm",
				"src/js/widgets/base/WidgetMixin.js"
			],
			[
				"widgets/create",
				"src/js/widgets/create.js"
			],
			[
				"getregion",
				"src/js/render/getRegionInCanvas.js"
			],
			[
				"appstate",
				"src/js/state/AppState.js"
			],
			[
				"appd",
				"src/js/data/AppData.js"
			],
			[
				"canvasp",
				"src/js/views/properties/CanvasProperties.jsx"
			],
			[
				"prepareprop",
				"src/js/widgets/prepareProperties.js"
			],
			[
				"propertiesmana",
				"src/js/data/PropertiesManager.js"
			],
			[
				"toolarea",
				"src/js/ToolArea.jsx"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"react-m",
				"~/code/react-menus/react-menus.sublime-project"
			],
			[
				"react-date",
				"~/code/react-date-picker/react-date-picker.sublime-project"
			],
			[
				"react",
				"~/code/react-date-picker/react-date-picker.sublime-project"
			],
			[
				"split",
				"~/code/react-split-container/react-split-container.sublime-project"
			],
			[
				"raect-sp",
				"~/code/react-split-container/react-split-container.sublime-project"
			],
			[
				"react-so",
				"~/code/react-split-container/react-split-container.sublime-project"
			],
			[
				"zi",
				"~/code/ZippyUI/zippyui.sublime-project"
			],
			[
				"react-ta",
				"~/code/react-tab-panel/react-tab-panel.sublime-project"
			],
			[
				"date",
				"~/code/react-date-picker/react-date-picker.sublime-project"
			],
			[
				"i-",
				"~/code/i-s/is.sublime-project"
			],
			[
				"reg",
				"~/code/region/region.sublime-project"
			],
			[
				"css",
				"~/code/css-utils/css-utils.sublime-project"
			],
			[
				"ca",
				"~/code/project-radu-brehar/calorie-warn.sublime-project"
			],
			[
				"func",
				"~/code/functionally/functionally.sublime-project"
			],
			[
				"Z",
				"~/code/ZippyUI/zippyui.sublime-project"
			],
			[
				"react-f",
				"~/code/react-flex/react-flex.sublime-project"
			],
			[
				"copy",
				"~/code/copy-utils/copy-utils.sublime-project"
			],
			[
				"b",
				"~/code/blog/blog-posts.sublime-project"
			],
			[
				"blog",
				"~/code/radubrehar.github.io/blog-posts.sublime-workspace"
			],
			[
				"blo",
				"~/code/blog/blog-posts.sublime-project"
			],
			[
				"f",
				"~/code/functionally/functionally.sublime-project"
			],
			[
				"z",
				"~/code/ZippyUI/zippyui.sublime-project"
			],
			[
				"entity",
				"~/code/entity-hapi/entity-hapi.sublime-project"
			],
			[
				"",
				"~/code/i-s/is.sublime-project"
			],
			[
				"cl",
				"~/code/classy/classy.sublime-project"
			],
			[
				"a",
				"~/code/alchemy/alchemy.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 415.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
