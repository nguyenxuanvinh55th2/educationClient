"use strict";
var graphql_anywhere_1 = require('graphql-anywhere');
var storeUtils_1 = require('./storeUtils');
var storeUtils_2 = require('./storeUtils');
var getFromAST_1 = require('../queries/getFromAST');
function readQueryFromStore(_a) {
    var store = _a.store, query = _a.query, variables = _a.variables, _b = _a.returnPartialData, returnPartialData = _b === void 0 ? false : _b;
    var result = diffQueryAgainstStore({
        query: query,
        store: store,
        returnPartialData: returnPartialData,
        variables: variables,
    }).result;
    return result;
}
exports.readQueryFromStore = readQueryFromStore;
var haveWarned = false;
var fragmentMatcher = function (objId, typeCondition, context) {
    var obj = context.store[objId];
    if (!obj) {
        return false;
    }
    if (!obj.__typename) {
        if (!haveWarned) {
            console.warn("You're using fragments in your queries, but don't have the addTypename:\ntrue option set in Apollo Client. Please turn on that option so that we can accurately\nmatch fragments.");
            if (process.env.NODE_ENV !== 'test') {
                haveWarned = true;
            }
        }
        context.returnPartialData = true;
        return true;
    }
    if (obj.__typename === typeCondition) {
        return true;
    }
    context.returnPartialData = true;
    return true;
};
var readStoreResolver = function (fieldName, objId, args, context) {
    var obj = context.store[objId];
    var storeKeyName = storeUtils_2.storeKeyNameFromFieldNameAndArgs(fieldName, args);
    var fieldValue = (obj || {})[storeKeyName];
    if (typeof fieldValue === 'undefined') {
        if (!context.returnPartialData) {
            throw new Error("Can't find field " + storeKeyName + " on object (" + objId + ") " + JSON.stringify(obj, null, 2) + ".\nPerhaps you want to use the `returnPartialData` option?");
        }
        context.hasMissingField = true;
        return fieldValue;
    }
    if (storeUtils_1.isJsonValue(fieldValue)) {
        return fieldValue.json;
    }
    if (storeUtils_1.isIdValue(fieldValue)) {
        return fieldValue.id;
    }
    return fieldValue;
};
function diffQueryAgainstStore(_a) {
    var store = _a.store, query = _a.query, variables = _a.variables, _b = _a.returnPartialData, returnPartialData = _b === void 0 ? true : _b;
    getFromAST_1.getQueryDefinition(query);
    var context = {
        store: store,
        returnPartialData: returnPartialData,
        hasMissingField: false,
    };
    var result = graphql_anywhere_1.default(readStoreResolver, query, 'ROOT_QUERY', context, variables, {
        fragmentMatcher: fragmentMatcher,
    });
    return {
        result: result,
        isMissing: context.hasMissingField,
    };
}
exports.diffQueryAgainstStore = diffQueryAgainstStore;
//# sourceMappingURL=readFromStore.js.map