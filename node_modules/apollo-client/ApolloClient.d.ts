/// <reference types="chai" />
/// <reference types="es6-shim" />
/// <reference types="typed-graphql" />
import { NetworkInterface } from './transport/networkInterface';
import { Document, FragmentDefinition } from 'graphql';
import { ApolloStore, ApolloReducerConfig, Store } from './store';
import { QueryManager, ApolloQueryResult, ResultComparator, ResultTransformer } from './core/QueryManager';
import { ObservableQuery } from './core/ObservableQuery';
import { Observable } from './util/Observable';
import { DeprecatedWatchQueryOptions, DeprecatedSubscriptionOptions } from './core/watchQueryOptions';
import { IdGetter } from './data/extensions';
import { MutationBehavior, MutationBehaviorReducerMap, MutationQueryReducersMap } from './data/mutationResults';
export declare type ApolloStateSelector = (state: any) => Store;
export default class ApolloClient {
    networkInterface: NetworkInterface;
    store: ApolloStore;
    reduxRootKey: string;
    reduxRootSelector: ApolloStateSelector | null;
    initialState: any;
    queryManager: QueryManager;
    reducerConfig: ApolloReducerConfig;
    addTypename: boolean;
    resultTransformer: ResultTransformer;
    resultComparator: ResultComparator;
    shouldForceFetch: boolean;
    dataId: IdGetter;
    fieldWithArgs: (fieldName: string, args?: Object) => string;
    constructor({networkInterface, reduxRootKey, reduxRootSelector, initialState, dataIdFromObject, resultTransformer, resultComparator, ssrMode, ssrForceFetchDelay, mutationBehaviorReducers, addTypename, queryTransformer}?: {
        networkInterface?: NetworkInterface;
        reduxRootKey?: string;
        reduxRootSelector?: string | ApolloStateSelector;
        initialState?: any;
        dataIdFromObject?: IdGetter;
        resultTransformer?: ResultTransformer;
        resultComparator?: ResultComparator;
        ssrMode?: boolean;
        ssrForceFetchDelay?: number;
        mutationBehaviorReducers?: MutationBehaviorReducerMap;
        addTypename?: boolean;
        queryTransformer?: any;
    });
    watchQuery(options: DeprecatedWatchQueryOptions): ObservableQuery;
    query(options: DeprecatedWatchQueryOptions): Promise<ApolloQueryResult>;
    mutate(options: {
        mutation: Document;
        variables?: Object;
        resultBehaviors?: MutationBehavior[];
        fragments?: FragmentDefinition[];
        optimisticResponse?: Object;
        updateQueries?: MutationQueryReducersMap;
        refetchQueries?: string[];
    }): Promise<ApolloQueryResult>;
    subscribe(options: DeprecatedSubscriptionOptions): Observable<any>;
    reducer(): Function;
    middleware: () => (store: ApolloStore) => (next: any) => (action: any) => any;
    initStore(): void;
    resetStore(): void;
    private setStore(store);
}
